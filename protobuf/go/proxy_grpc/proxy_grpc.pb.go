// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proxy_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NetworkProxyClient is the client API for NetworkProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkProxyClient interface {
	Proxy(ctx context.Context, opts ...grpc.CallOption) (NetworkProxy_ProxyClient, error)
}

type networkProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkProxyClient(cc grpc.ClientConnInterface) NetworkProxyClient {
	return &networkProxyClient{cc}
}

func (c *networkProxyClient) Proxy(ctx context.Context, opts ...grpc.CallOption) (NetworkProxy_ProxyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NetworkProxy_serviceDesc.Streams[0], "/proxy.NetworkProxy/Proxy", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkProxyProxyClient{stream}
	return x, nil
}

type NetworkProxy_ProxyClient interface {
	Send(*MessageForward) error
	Recv() (*MessageBack, error)
	grpc.ClientStream
}

type networkProxyProxyClient struct {
	grpc.ClientStream
}

func (x *networkProxyProxyClient) Send(m *MessageForward) error {
	return x.ClientStream.SendMsg(m)
}

func (x *networkProxyProxyClient) Recv() (*MessageBack, error) {
	m := new(MessageBack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NetworkProxyServer is the server API for NetworkProxy service.
// All implementations must embed UnimplementedNetworkProxyServer
// for forward compatibility
type NetworkProxyServer interface {
	Proxy(NetworkProxy_ProxyServer) error
	mustEmbedUnimplementedNetworkProxyServer()
}

// UnimplementedNetworkProxyServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkProxyServer struct {
}

func (UnimplementedNetworkProxyServer) Proxy(NetworkProxy_ProxyServer) error {
	return status.Errorf(codes.Unimplemented, "method Proxy not implemented")
}
func (UnimplementedNetworkProxyServer) mustEmbedUnimplementedNetworkProxyServer() {}

// UnsafeNetworkProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkProxyServer will
// result in compilation errors.
type UnsafeNetworkProxyServer interface {
	mustEmbedUnimplementedNetworkProxyServer()
}

func RegisterNetworkProxyServer(s *grpc.Server, srv NetworkProxyServer) {
	s.RegisterService(&_NetworkProxy_serviceDesc, srv)
}

func _NetworkProxy_Proxy_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NetworkProxyServer).Proxy(&networkProxyProxyServer{stream})
}

type NetworkProxy_ProxyServer interface {
	Send(*MessageBack) error
	Recv() (*MessageForward, error)
	grpc.ServerStream
}

type networkProxyProxyServer struct {
	grpc.ServerStream
}

func (x *networkProxyProxyServer) Send(m *MessageBack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *networkProxyProxyServer) Recv() (*MessageForward, error) {
	m := new(MessageForward)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _NetworkProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.NetworkProxy",
	HandlerType: (*NetworkProxyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Proxy",
			Handler:       _NetworkProxy_Proxy_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proxy.proto",
}
